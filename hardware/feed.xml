<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hardwares on 时光小栈</title><link>/hardware/</link><description>Recent content in Hardwares on 时光小栈</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><managingEditor>rinetd@163.com (rinetd)</managingEditor><webMaster>rinetd@163.com (rinetd)</webMaster><copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright><lastBuildDate>Wed, 30 Sep 2020 10:29:07 +0800</lastBuildDate><atom:link href="/hardware/feed.xml" rel="self" type="application/rss+xml"/><item><title>hafun 4g hefangyuan socket</title><link>/hardware/hafun-4g-hefangyuan-socket/</link><pubDate>Wed, 30 Sep 2020 10:29:07 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/hafun-4g-hefangyuan-socket/</guid><description>typedef enum { SOCK_ERR_EAI = -9, SOCK_INVAL_PARA = -8, SOCK_ERROR = -7, SOCK_PEER_NOT_REACHABLE = -6, // 连接失败，连接不可达 SOCK_PEER_NO_RESPONSE = -5, SOCK_CNT_RESET_BY_PEER = -4, // disconnect 断开连接 SOCK_UNKNOWN_APP = -3, SOCK_BUSY = -2, SOCK_NO_MEMORY = -1, SOCK_SUCCESS = 0, // connect 连接成功 SOCK_ERR_CONN_PENDING = 1, } sock_result_enum; static uint8 g_conn_id = 1; int _on_connect(sock_result_enum result) {</description></item><item><title>SGM41511-bq2560</title><link>/hardware/sgm41511/</link><pubDate>Sat, 22 Aug 2020 17:03:59 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/sgm41511/</guid><description>bq2560x_charger</description></item><item><title>移远EC20 Opencpu方案调试记录</title><link>/hardware/opencpu/%E8%80%8C%E5%87%BA0/</link><pubDate>Thu, 13 Aug 2020 11:13:10 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/opencpu/%E8%80%8C%E5%87%BA0/</guid><description>(2条消息)移远EC20二次开发之4G图像传输_qq_35570735的博客-CSDN博客_ec20模块二次开发 pengphei/quectel-ec20 EC20 手册 EC20 SDK https://github.com/czplove/linux_kernel_ec20/tree/master/ql-ol-sdk 移远EC20 O</description></item><item><title>linux yocto bitbake poky</title><link>/hardware/linux-yocto-bitbake-poky/</link><pubDate>Tue, 11 Aug 2020 17:11:14 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/linux-yocto-bitbake-poky/</guid><description>Yocto tips (6): Yocto中如何共享已经下载的文件 1.名词解释 Yocto：Yocto是这个开源项目的名称，该项目旨在帮助我们自定义Linux系统 Pok</description></item><item><title>ec20 powersave</title><link>/hardware/ec20-powersave/</link><pubDate>Fri, 24 Jul 2020 10:53:07 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/ec20-powersave/</guid><description>EC20 休眠 RI 用来唤醒主机 AT+QCFG=&amp;quot;risignaltype&amp;quot;,&amp;quot;physical&amp;quot; ,确保RI总能在端口得到提醒 DTR 控制模块的睡眠 拉低DTR会将模块主动唤醒，不在进入休眠 echo &amp;quot;AT+QSCLK=1&amp;quot; &amp;gt;/dev/ttyUSB2 DTR 拉高 EC20的支持以下几种</description></item><item><title>dc dc</title><link>/hardware/dc-dc/</link><pubDate>Tue, 21 Jul 2020 21:06:35 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/dc-dc/</guid><description>http://www.51hei.com/bbs/dpj-89203-1.html DC-DC电路设计中对电感的选型为工程师们带来许多挑战，不仅要选择电感值，还要考虑电感可承受的电流，绕组的电阻，机械尺寸等。因此只有充分理</description></item><item><title>Allegro</title><link>/hardware/allegro/</link><pubDate>Sat, 18 Jul 2020 17:51:22 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/allegro/</guid><description>使用Cadence绘制PCB流程（个人小结）_u012996559的博客-CSDN博客_allegro routkeepout 禁止布线区 Allegro 铺铜设置_jiangch</description></item><item><title>hezhou i2c</title><link>/hardware/hezhou-i2c-am2320/</link><pubDate>Mon, 13 Jul 2020 10:08:16 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/hezhou-i2c-am2320/</guid><description>require &amp;quot;utils&amp;quot; require &amp;quot;log&amp;quot; module(..., package.seeall) local float = rtos.get_version():upper():find(&amp;quot;FLOAT&amp;quot;) --初始化并打开I2C local function i2c_open(id) if i2c.setup(id, i2c.SLOW) ~= i2c.SLOW then i2c.close(id) return i2c.setup(id, i2c.SLOW) end return i2c.SLOW end function TH(id, addr) id, addr = id or 2, addr or 0x5c if not i2c_open(id) then return end i2c.send(id, addr, 0x03) i2c.send(id, addr, {0x03, 0x00, 0x04}) local data = i2c.recv(id, addr, 8)</description></item><item><title>STM8L151G6U6 之实现低功耗</title><link>/hardware/stm8/stm-rtc/</link><pubDate>Tue, 30 Jun 2020 15:18:52 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm8/stm-rtc/</guid><description>STM8L051F3P6 STM8L151G6U6 之实现低功耗 所谓低功耗产品，一般来讲就是在大多数时间让MCU进入睡眠模式，在有数据更新时唤醒，将数据显示或者发送上报。对于中断类型的，可</description></item><item><title>hfy4G-mdm9607</title><link>/hardware/hafun-4g/</link><pubDate>Mon, 22 Jun 2020 15:53:51 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/hafun-4g/</guid><description>测试项目： A. 图像质量 B. 电流测试 C. echo -e &amp;quot;at+campara=10,7200\r&amp;quot; &amp;gt;/dev/smd8 echo -e &amp;quot;at+campara=10,60\r&amp;quot; &amp;gt;/dev/smd8 echo -e &amp;quot;at+campara=9,1\r&amp;quot; &amp;gt;/dev/smd8 echo -e &amp;quot;at+campara=18,1\r&amp;quot; &amp;gt;/dev/smd8 echo -e &amp;quot;at+camsvr=2,1\r&amp;quot; &amp;gt;/dev/smd8 echo -e &amp;quot;at+campara?\r&amp;quot; &amp;gt;/dev/smd8 echo -e &amp;quot;at+camscont\r&amp;quot; &amp;gt;/dev/smd8 echo -e &#39;AT+CAMPARA=6,&amp;quot;http://47.104.136.74:8080/upload&amp;quot;\r&#39; &amp;gt;/dev/smd8 echo -e &amp;quot;at+camrv?\r&amp;quot; &amp;gt;/dev/smd8 echo -e &amp;quot;at+camrv=1\r&amp;quot; &amp;gt;/dev/smd8 ### 调节电池分级 echo -e &amp;quot;AT+CAMPARA=10, 3600,7200,28800,86400\r&amp;quot; &amp;gt;/dev/smd8 echo -e</description></item><item><title>stm8 halt</title><link>/hardware/stm8/stm8-halt/</link><pubDate>Thu, 23 Apr 2020 17:53:28 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm8/stm8-halt/</guid><description>如果你象其它单片机一样，开启了AWU,然后来一句halt(); 那么此时的电流为200uA左右，到此差不多心灰意冷，STM8S这么差劲儿！ 仔细</description></item><item><title>stm8 awu</title><link>/hardware/stm8/stm8-awu/</link><pubDate>Thu, 23 Apr 2020 15:34:24 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm8/stm8-awu/</guid><description>#include &amp;quot;awu.h&amp;quot; #include &amp;lt;stm8s.h&amp;gt; /* * Enable auto wake up */ void awu_enable() { // Timebase 0b1011 (512 ms - 1.024 s) AWU_TBR = 0x0B; // Prescaler 62 (with 1011 timebase -&amp;gt; 0,496 s) AWU_APR = 0x3E; // Enable the auto wake up feature AWU_CSR = AWU_CSR | (1 &amp;lt;&amp;lt; AWU_CSR_AWUEN); } void awu_disable() { // Disable the auto wake up feature AWU_CSR = AWU_CSR | (0 &amp;lt;&amp;lt; AWU_CSR_AWUEN); AWU_TBR = 0; } void active_halt() { // Switch off main regulator during halt mode CLK_ICKR = CLK_ICKR | (1 &amp;lt;&amp;lt; CLK_ICKR_REGAH); // Power down flash during halt mode FLASH_CR1 = FLASH_CR1 | (1 &amp;lt;&amp;lt; FLASH_CR1_AHALT); // Halt instruction halt(); }</description></item><item><title>输电线路在线监测系统应用层数据传输规约协议 DTS_for_OLMS</title><link>/hardware/stm8/stm8-dts_for_olms/</link><pubDate>Thu, 23 Apr 2020 11:10:16 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm8/stm8-dts_for_olms/</guid><description>Data transportation specification for on-line monitoring system on overhead transmission lines kex2017/DTS_for_OLMS: Data transportation specification for on-line monitoring system on overhead transmission lines</description></item><item><title>stm8 GPIO_interrupt</title><link>/hardware/stm8/stm8-gpio_interrupt/</link><pubDate>Wed, 22 Apr 2020 19:51:04 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm8/stm8-gpio_interrupt/</guid><description>STM8S---外部中断应用之长按键识别 - mthoutai - 博客园 void buttons_set_handler(void) __interrupt( INTERRUPT_TLI) { if(setpt == PT_NONE) { setpt = PT_DOWN; setdown = buttons_gettime(); } } void buttons_on_handler(void) __interrupt(INTERRUPT_EXTI3) { if(onpt == PT_NONE) { onpt = PT_DOWN; ondown = buttons_gettime(); } } void buttons_init(void) { const uint8_t mask = (1 &amp;lt;&amp;lt; 3) |</description></item><item><title>stm8 timer</title><link>/hardware/stm8/stm8-timer/</link><pubDate>Wed, 22 Apr 2020 16:26:52 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm8/stm8-timer/</guid><description>Timer1 /*定时时间 = (TIM1_ARRL + 1) * 10ms */ void Timer1_init(void) { CLK_PCKENR1 |= 0x80; //打开TIM1时钟 = Fmaster = 2MHz asm(&amp;quot;sim&amp;quot;); // 关全局中断 TIM1_PSCRH = 0x4E; TIM1_PSCRL = 0x20; //时钟20000分频，2MHz/20000 =</description></item><item><title>stm8 uart</title><link>/hardware/stm8/stm8-uart/</link><pubDate>Wed, 22 Apr 2020 13:59:41 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm8/stm8-uart/</guid><description/></item><item><title>stm8 print</title><link>/hardware/stm8/stm8-print/</link><pubDate>Wed, 18 Mar 2020 17:42:19 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm8/stm8-print/</guid><description>然后就是重写fputc函数，使之定向到指定的串口中去。代码如下： /* ** Rewrite fputc function and make printf function work */ int fputc(int ch, FILE file) { USART1-&amp;gt;TDR = ch &amp;amp; 0xFF; while((USART1-&amp;gt;ISR &amp;amp; UART_FLAG_TC) == RESET); return ch; } 在该例中使用的U</description></item><item><title>stm8 adc</title><link>/hardware/stm8/stm8-adc/</link><pubDate>Tue, 17 Mar 2020 16:13:32 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm8/stm8-adc/</guid><description>void InitADC(void) { //PD6 set as FloatingInput PD_DDR &amp;amp;= 0xBF;//1011 1111 PD_CR1 &amp;amp;= 0xBF; PD_CR2 &amp;amp;= 0xBF; ADC_CR1 = 0x01;//first time open ADC£¬second time convert ADC data ADC_CSR = 0X06;//choose channel AIN6 ADC_CR2 = 0X00;//left arrange (default) } unsigned int GetADC(void) { volatile unsigned int adcValue; volatile unsigned char tmp = 100; ADC_CR1 |= 0x01;//first time open ADC while(tmp--); ADC_CR1</description></item><item><title>stm8</title><link>/hardware/stm32/stm8/</link><pubDate>Tue, 17 Mar 2020 15:36:01 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm32/stm8/</guid><description>https://github.com/fifteenhex/openebdmini.git
https://github.com/hashsum0/STM8S_SDCC.git
jjflash65/stm8s103: STM8S103F3P6 - Hardwareanbindung und Demoprogramme
https://github.com/yuxiao/stm8s_lib.git
EXTI_CR1_PCIS_FALLING
dev26th/electronic_load: Reinvented firmware for the electronic load 60W
johschmitz/tracking_tag: A wildlife tracking tag firmware for the HC-11 module (featuring stm8s and CC1101).
YAGbot/Embedded-system</description></item><item><title>smt8 sdcc</title><link>/hardware/stm32/smt8-sdcc/</link><pubDate>Tue, 17 Mar 2020 11:39:17 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm32/smt8-sdcc/</guid><description>brew install sdcc brew install autoconf automake pkg-config libusb libusb-compat stlink https://github.com/EMBEDONIX/stm8 roshbaby/stm8s-sdcc: STM8S Standard Peripheral Library Ported to SDCC for multiple STM8 targets STM8S Programming · TG9541/stm8ef Wiki STM8 development with Eclipse and macOS – nubix-Weblog Setup Eclipse Eclipse can be configured to allow development of C++ firmware cod for the STM8 with editing, flashing and debugging. There are some steps that are critical to get Eclipse to work</description></item><item><title>stm8 cube</title><link>/hardware/stm32/stm8-cube/</link><pubDate>Tue, 17 Mar 2020 10:52:30 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm32/stm8-cube/</guid><description>3.2.2Installing STM8CubeMX from command lineThere
INSTALL on macos nteractive modeTo perform interactive installation, type the following command:java –jar SetupSTM8CubeMX-1.0.0.exe –cons
Figure 3. STM8Cube Installation WizardYou can then launch the installation just by typing the following command:
java –jar SetupSTM8CubeMX-1.0.0.exe auto-install.
Uninstalling STM8CubeMX on MacOSTo uninstall STM8CubeMX on MacOS, use the following command line:
java -jar &amp;lt;STM8CubeMX installation path&amp;gt;/Uninstaller/uninstaller</description></item><item><title>macos stm32 stlink arm gcc embeded</title><link>/hardware/stm32/macos-stm32-stlink-arm-gcc-embeded/</link><pubDate>Mon, 16 Mar 2020 21:09:18 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm32/macos-stm32-stlink-arm-gcc-embeded/</guid><description>1.STlinkV2 盗版下载器的使用 重点来了：当板子上没有JTAG接口时，我们可以使用 SWD接线方式， 以前使用盗版的ST-link时，只需要四根线（SWIO,</description></item><item><title>stm clock</title><link>/hardware/stm32/stm-clock/</link><pubDate>Mon, 16 Mar 2020 11:29:02 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm32/stm-clock/</guid><description>STM32单片机学习笔记 - 知乎 注意:启动时，主时钟源默认为HSI RC时钟的8分频，即 fHSI 16M/8 =2M CLK_CKDIVR = 0x18 // 默认值是 11:fHSI = fHSI RC输出/8 == 2M 通过修改 CLK_CKDIVR =</description></item><item><title>stm32 can</title><link>/hardware/stm32/stm32-can/</link><pubDate>Tue, 03 Mar 2020 17:57:31 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm32/stm32-can/</guid><description>基于STM32的CAN总线通信学习笔记_网络_Qrsleizhipeng的博客-CSDN博客 编程调试心得（总结一些知识要点） 1 对CAN_RX</description></item><item><title>raspberry</title><link>/hardware/raspi/raspberry/</link><pubDate>Sat, 29 Feb 2020 11:17:52 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/raspi/raspberry/</guid><description>[原创]初玩树莓派B 3实用配置(vnc和串口)-『智能设备』-看雪安全论坛</description></item><item><title>ifplugd 实现网口检测</title><link>/hardware/busybox/busybox-ifplugd/</link><pubDate>Sat, 22 Feb 2020 10:14:02 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/busybox/busybox-ifplugd/</guid><description>ifplugd检测eth0拔插消息 为了检测固定网线口的拔插消息，在busybox里配置了ifplugd ptions: -n Don&#39;t daemonize -s Don&#39;t log to syslog -i IFACE Interface -f/-F Treat link detection error as link</description></item><item><title>linux fs mtd mtdblock</title><link>/hardware/linux-fs-mtd-mtdblock/</link><pubDate>Fri, 21 Feb 2020 11:14:29 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/linux-fs-mtd-mtdblock/</guid><description>1. 文件系统简介 文件系统是一种存储和组织计算机数据的方法，它使得对其访问和查找变得容易，文件系统使用文件和树形目录的抽象逻辑概念代替了硬盘和光</description></item><item><title>jetson GStreamer Pipelines Capture_and_Display</title><link>/hardware/jetson/jetson-gstreamer-pipelines-capture_and_display/</link><pubDate>Tue, 18 Feb 2020 17:42:53 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/jetson/jetson-gstreamer-pipelines-capture_and_display/</guid><description>IMX219-160 Camera - Waveshare Wiki
NVIDIA Xavier - Capture and Display
gst-launch-1.0 nvarguscamerasrc ! &#39;video/x-raw(memory:NVMM), width=(int)1920, height=(int)1080, format=(string)NV12, framerate=(fraction)30/1&#39; ! nvoverlaysink
Performance:
Operation Mode CPU% GPU% FPS latency(ms)
0 (max performance) 0.0 4.92 30.01 114
1 (min power) 0.0 49.37 30.02 114
2 (default) 1.07 10.91 30.02 115
2592x1944@30 (native):
gst-launch-1.0 nvarguscamerasrc ! &#39;video/x-raw(memory:NVMM), width=(int)2592, height=(int)1944, format=(string)NV12, framerate=(fraction)30/1&#39; ! nvoverlaysink
DISPLAY=:0.0 gst-launch-1.0 nvarguscamerasrc ! &#39;video/x-raw(memory:NVMM), width=3280, height=2464, format=(string)NV12, framerate=(fraction)20/1&#39; ! nvoverlaysink -e</description></item><item><title>jetson yolov3 csi</title><link>/hardware/jetson/jetson-yolov3-csi/</link><pubDate>Tue, 18 Feb 2020 17:24:22 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/jetson/jetson-yolov3-csi/</guid><description>jetson-nano项目：使用csi摄像头运行yolov3-tiny demo 前言 Step 1:安装GStreamer Step 2:配置GStreamer管道 Step 3</description></item><item><title>Raspberry Pi UART使用速記</title><link>/hardware/raspi/raspi-usart-bt/</link><pubDate>Sat, 15 Feb 2020 22:02:41 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/raspi/raspi-usart-bt/</guid><description>树莓派3b+串口配置_唐传林的博客-CSDN博客 默认用户名是pi，密码是raspberry。 要先從 raspi-config 將 serial 選成 no 再從 /boot/config.txt 加入 enable_uart=1, 就可以透過 /dev/ttyAMA0 通訊 /boot/config.txt</description></item><item><title>raspi home</title><link>/hardware/raspi/raspi-home/</link><pubDate>Sat, 15 Feb 2020 22:00:56 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/raspi/raspi-home/</guid><description>Home Automation Stack The stack contains everything to run FHEM on a Docker host. Mosquitto is used as message broker. SIRI functions are realized with the help of a homebridge container. The complete stack runs on x86 as well as arm architectures. It is very easy to clone its complete productive environment and has a simple way to build a test system.
Todo Mosquitto user-/groupid problem
DBLog Integration</description></item><item><title>raspi macos install</title><link>/hardware/raspi/raspi-macos-install/</link><pubDate>Fri, 14 Feb 2020 12:06:04 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/raspi/raspi-macos-install/</guid><description>如何在 Raspberry Pi 上安装 Raspbian_Linux教程_Linux公社-Linux系统门户网站 如何在 Raspberry Pi 上安装 Raspbian 前几天制作树莓派的TF卡映像文件，</description></item><item><title>AT指令（中文详解版）（一）</title><link>/hardware/at-helper/</link><pubDate>Wed, 08 Jan 2020 09:51:41 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/at-helper/</guid><description>一 ． 一 般 命 令 1．AT+CGMI 给出模块厂商的标识。 2．AT+CGMM 获得模块标识。这个命令用来得到支持的频带（GSM 900，DCS 1800 或PCS</description></item><item><title>EC20 AT 串口使用TCPIP</title><link>/hardware/ec20-at/</link><pubDate>Wed, 11 Dec 2019 15:18:59 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/ec20-at/</guid><description>EC20的低功耗模式 - 杰瑞鼠 - 博客园 端口说明： EC20挂载系统成功后，在Windows环境下会有三个com口，分别为AT Port、DM Por</description></item><item><title>xiongmai</title><link>/hardware/xiongmai/</link><pubDate>Thu, 14 Nov 2019 19:34:08 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/xiongmai/</guid><description>在ubuntu上控制雄迈模块的参数 雄迈摄像机数字接口 NeiroNx/python-dvr: xmeye sofia dvr nvr ipcam config</description></item><item><title>jetson</title><link>/hardware/jetson/jetson/</link><pubDate>Sat, 19 Oct 2019 18:18:03 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/jetson/jetson/</guid><description>!!!TX2的電源是12V，Nano的是5V，不可混用!!! 技术参数 1. 开机初始配置 1.1 器件准备 1.2 烧写系统 1.3 开机配置 1.4 关闭图形界面 1.4.1 关闭图像用户</description></item><item><title>linux 内核中的pwm</title><link>/hardware/linux-pwm/</link><pubDate>Fri, 11 Oct 2019 10:02:45 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/linux-pwm/</guid><description>PWM常用来做电机控制、LED背光亮度调节、开关电源等。 Linux pwm driver with sysfs TI linux pwm user guide: http://processors.wiki.ti.com/index.php/Linux_Core_PWM_User%27s_Guide#eHRPWM Freescale: https://support.bluetechnix.at/wiki/Linux_Software_User_Manual_(i.MX6)#PWM Gateworks: http://trac.gateworks.com/wiki/linux/pwm 对于TI的pwm来说 首先配置内核支持pwm模块，其中e</description></item><item><title>camera</title><link>/hardware/camera/camera/</link><pubDate>Tue, 13 Aug 2019 15:00:53 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/camera/camera/</guid><description>200万H265高清4G插卡无线摄像头模块DIY监控1080模组半成品无外壳 开放平台 http://open.xmeye.net/zh/ 硬件电路 大华 http://www.relmon.com/index.php/list/detail/176.html MS41909 用于多倍光学变焦镜头及各种小型电子产品</description></item><item><title>gcc linaro aarch64 linux gnu</title><link>/hardware/gcc-linaro-aarch64-linux-gnu/</link><pubDate>Fri, 02 Aug 2019 14:13:01 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/gcc-linaro-aarch64-linux-gnu/</guid><description>macos 安装 ARM 交叉编译环境 gcc-linaro-7.4.1-2019.02-i686_aarch64-linux-gnu sudo tar xJf gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu.tar.xz -C /usr/local/ export PATH=/usr/local/gcc-linaro-7.4.1-2019.02-i686_aarch64-linux-gnu/bin:$PATH aarch64-linux-gnu-g++ -v GCC 5 和 GCC7 多版本共存 ls /usr/bin/gcc* sudo apt-get install gcc-4.8 sudo apt-get install g++-4.8 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 40 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 70 sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 40 sudo update-alternatives</description></item><item><title>go hardware</title><link>/hardware/go-hardware/</link><pubDate>Wed, 22 May 2019 10:53:46 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/go-hardware/</guid><description>rakyll/go-hardware: A directory of hardware related libs, tools, and tutorials for Go</description></item><item><title>platform 总线</title><link>/hardware/platform/device/</link><pubDate>Tue, 07 May 2019 11:10:18 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/platform/device/</guid><description>设备 总线 驱动 相互独立 设备 在注册时 自动寻找驱动,反过来也是 驱动在注册时自动寻找设备 他们所挂载的总线(bus)用来做匹配, probe 函数执行的前提是, 驱</description></item><item><title>go gpio</title><link>/hardware/go-gpio/</link><pubDate>Fri, 26 Apr 2019 09:03:35 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/go-gpio/</guid><description>Linux下用文件IO的方式操作GPIO（/sys/class/gpio） - 卢小喵的学习笔记 - CSDN博客 Golang笔记–04–GPIO与</description></item><item><title>go usart</title><link>/hardware/go-usart/</link><pubDate>Fri, 26 Apr 2019 08:59:54 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/go-usart/</guid><description>https://github.com/andrewloable/treadmill-streetview/
func ReadSerial(s *serial.Port) { buf := make([]byte, 128) n, err := s.Read(buf) if err != nil { fmt.Printf(&amp;quot;read err %s&amp;quot;, err) } fmt.Printf(&amp;quot;Read: %x \n&amp;quot;, buf[:n]) } func WriteSerial(s *serial.Port, b []byte) { _, err := s.Write(b) if err != nil { fmt.Printf(&amp;quot;%s&amp;quot;, err) } fmt.Printf(&amp;quot;Wrote: %x\n&amp;quot;, b) } package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;os/exec&amp;quot; &amp;quot;runtime&amp;quot; &amp;quot;time&amp;quot; &amp;quot;github.com/gin-gonic/gin&amp;quot; cors &amp;quot;github.com/itsjamie/gin-cors&amp;quot; &amp;quot;github.com/tarm/serial&amp;quot; ) // SerialConfig ... type SerialConfig struct { Name string Baud int } var config SerialConfig var loops int64 // {&amp;quot;Name&amp;quot;:&amp;quot;COM4&amp;quot;,&amp;quot;Baud&amp;quot;:9600} func readConfigFromFile(ps *SerialConfig) { file, err := ioutil.</description></item><item><title>go i2c</title><link>/hardware/go-i2c/</link><pubDate>Fri, 26 Apr 2019 08:59:40 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/go-i2c/</guid><description>https://github.com/d2r2/go-i2c 对10位地址操作 https://github.com/golang/exp/blob/master/io/i2c/i2c.go / resolveAddr returns whether the addr is 10-bit masked or not. // It also returns the unmasked address. func resolveAddr(addr int) (unmasked int, tenbit bool) { return addr &amp;amp; (tenbitMask - 1), addr&amp;amp;tenbitMask == tenbitMask } go: AM2320传感器：CRC不匹配，来自传感器的</description></item><item><title>freertos semphone</title><link>/hardware/freertos/freertos-semphone/</link><pubDate>Thu, 25 Apr 2019 15:21:46 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/freertos/freertos-semphone/</guid><description>FreeRTOS — 计数信号量，二值信号量** - Liu_Jing - 博客园 FreeRTOS — 计数信号量，二值信号量**</description></item><item><title>modbus基础</title><link>/hardware/modbus/</link><pubDate>Tue, 29 Mar 2016 21:25:45 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/modbus/</guid><description>Modbus总结 1.概念 ①Coil和Register Modbus中定义的两种数据类型。 Coil是位（bit）变量； Register是整型（W</description></item><item><title>汽车CAN总线分析框架CANToolz</title><link>/hardware/cantoolz/</link><pubDate>Tue, 29 Mar 2016 21:25:45 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/cantoolz/</guid><description>汽车CAN总线分析框架CANToolz CANToolz 是一个分析控制局域网络CAN(Controller Area Network) 和设备的框架。该工具基于不同的模块组装在一起，</description></item><item><title>STM32_定时器</title><link>/hardware/stm32/stm32-%E5%AE%9A%E6%97%B6%E5%99%A8/</link><pubDate>Wed, 09 Dec 2015 11:00:19 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm32/stm32-%E5%AE%9A%E6%97%B6%E5%99%A8/</guid><description>最近做项目，用到定时器，索性重新学习一下，以前只是用于简单的pwm生成和中断处理，对定时器根本就没有进行深入研究，今天借此机会，重新学习一下</description></item><item><title>STM32_GPIO模式</title><link>/hardware/stm32/stm32-gpio%E6%A8%A1%E5%BC%8F/</link><pubDate>Fri, 04 Dec 2015 10:54:16 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm32/stm32-gpio%E6%A8%A1%E5%BC%8F/</guid><description>所有的开漏输出都需要接上拉电阻。 ## 1、普通推挽输出（GPIO_Mode_Out_PP）: 使用场合：一般用在0V和3.3V的场合。线路经过两个</description></item><item><title>STM32_TIM定时器</title><link>/hardware/stm32/stm32-tim%E5%AE%9A%E6%97%B6%E5%99%A8/</link><pubDate>Thu, 03 Dec 2015 14:44:28 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm32/stm32-tim%E5%AE%9A%E6%97%B6%E5%99%A8/</guid><description>名词解释： 1.单脉冲模式 One Pulse mode TIM_SelectOnePulseMode(TIM2, TIM_OPMode_Single)//设置TIM2在单脉冲模式，且是单一的脉冲，在下一个更新事件停止 关于始</description></item><item><title>STM32_NVIC中断响应</title><link>/hardware/stm32/stm32-nvic%E4%B8%AD%E6%96%AD%E5%93%8D%E5%BA%94/</link><pubDate>Thu, 03 Dec 2015 14:18:57 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm32/stm32-nvic%E4%B8%AD%E6%96%AD%E5%93%8D%E5%BA%94/</guid><description>STM32中断优先级彻底讲解 - 凡人的博客 - CSDN博客 NVIC，中文名嵌套中断向量控制器，是Cortex-M3系列控制器内部独有集成单元，与</description></item><item><title>STM32中断</title><link>/hardware/stm32/stm32%E4%B8%AD%E6%96%AD/</link><pubDate>Wed, 02 Dec 2015 14:39:18 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/stm32/stm32%E4%B8%AD%E6%96%AD/</guid><description>stmcube太强大了 0x00 外部中配置EXIT stm32中断边沿是可配置的 既可以配置为上升沿触发，也可配置为下降沿触发，还可以同时触发</description></item></channel></rss>