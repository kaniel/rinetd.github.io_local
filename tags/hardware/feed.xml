<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hardware on 时光小栈</title><link>/tags/hardware/</link><description>Recent content in hardware on 时光小栈</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><managingEditor>rinetd@163.com (rinetd)</managingEditor><webMaster>rinetd@163.com (rinetd)</webMaster><copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright><lastBuildDate>Wed, 30 Sep 2020 10:29:07 +0800</lastBuildDate><atom:link href="/tags/hardware/feed.xml" rel="self" type="application/rss+xml"/><item><title>hafun 4g hefangyuan socket</title><link>/hardware/hafun-4g-hefangyuan-socket/</link><pubDate>Wed, 30 Sep 2020 10:29:07 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/hafun-4g-hefangyuan-socket/</guid><description>typedef enum { SOCK_ERR_EAI = -9, SOCK_INVAL_PARA = -8, SOCK_ERROR = -7, SOCK_PEER_NOT_REACHABLE = -6, // 连接失败，连接不可达 SOCK_PEER_NO_RESPONSE = -5, SOCK_CNT_RESET_BY_PEER = -4, // disconnect 断开连接 SOCK_UNKNOWN_APP = -3, SOCK_BUSY = -2, SOCK_NO_MEMORY = -1, SOCK_SUCCESS = 0, // connect 连接成功 SOCK_ERR_CONN_PENDING = 1, } sock_result_enum; static uint8 g_conn_id = 1; int _on_connect(sock_result_enum result) {</description></item><item><title>SGM41511-bq2560</title><link>/hardware/sgm41511/</link><pubDate>Sat, 22 Aug 2020 17:03:59 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/sgm41511/</guid><description>bq2560x_charger</description></item><item><title>linux yocto bitbake poky</title><link>/hardware/linux-yocto-bitbake-poky/</link><pubDate>Tue, 11 Aug 2020 17:11:14 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/linux-yocto-bitbake-poky/</guid><description>Yocto tips (6): Yocto中如何共享已经下载的文件 1.名词解释 Yocto：Yocto是这个开源项目的名称，该项目旨在帮助我们自定义Linux系统 Pok</description></item><item><title>ec20 powersave</title><link>/hardware/ec20-powersave/</link><pubDate>Fri, 24 Jul 2020 10:53:07 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/ec20-powersave/</guid><description>EC20 休眠 RI 用来唤醒主机 AT+QCFG=&amp;quot;risignaltype&amp;quot;,&amp;quot;physical&amp;quot; ,确保RI总能在端口得到提醒 DTR 控制模块的睡眠 拉低DTR会将模块主动唤醒，不在进入休眠 echo &amp;quot;AT+QSCLK=1&amp;quot; &amp;gt;/dev/ttyUSB2 DTR 拉高 EC20的支持以下几种</description></item><item><title>dc dc</title><link>/hardware/dc-dc/</link><pubDate>Tue, 21 Jul 2020 21:06:35 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/dc-dc/</guid><description>http://www.51hei.com/bbs/dpj-89203-1.html DC-DC电路设计中对电感的选型为工程师们带来许多挑战，不仅要选择电感值，还要考虑电感可承受的电流，绕组的电阻，机械尺寸等。因此只有充分理</description></item><item><title>Allegro</title><link>/hardware/allegro/</link><pubDate>Sat, 18 Jul 2020 17:51:22 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/allegro/</guid><description>使用Cadence绘制PCB流程（个人小结）_u012996559的博客-CSDN博客_allegro routkeepout 禁止布线区 Allegro 铺铜设置_jiangch</description></item><item><title>hezhou i2c</title><link>/hardware/hezhou-i2c-am2320/</link><pubDate>Mon, 13 Jul 2020 10:08:16 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/hezhou-i2c-am2320/</guid><description>require &amp;quot;utils&amp;quot; require &amp;quot;log&amp;quot; module(..., package.seeall) local float = rtos.get_version():upper():find(&amp;quot;FLOAT&amp;quot;) --初始化并打开I2C local function i2c_open(id) if i2c.setup(id, i2c.SLOW) ~= i2c.SLOW then i2c.close(id) return i2c.setup(id, i2c.SLOW) end return i2c.SLOW end function TH(id, addr) id, addr = id or 2, addr or 0x5c if not i2c_open(id) then return end i2c.send(id, addr, 0x03) i2c.send(id, addr, {0x03, 0x00, 0x04}) local data = i2c.recv(id, addr, 8)</description></item><item><title>hfy4G-mdm9607</title><link>/hardware/hafun-4g/</link><pubDate>Mon, 22 Jun 2020 15:53:51 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/hafun-4g/</guid><description>测试项目： A. 图像质量 B. 电流测试 C. echo -e &amp;quot;at+campara=10,7200\r&amp;quot; &amp;gt;/dev/smd8 echo -e &amp;quot;at+campara=10,60\r&amp;quot; &amp;gt;/dev/smd8 echo -e &amp;quot;at+campara=9,1\r&amp;quot; &amp;gt;/dev/smd8 echo -e &amp;quot;at+campara=18,1\r&amp;quot; &amp;gt;/dev/smd8 echo -e &amp;quot;at+camsvr=2,1\r&amp;quot; &amp;gt;/dev/smd8 echo -e &amp;quot;at+campara?\r&amp;quot; &amp;gt;/dev/smd8 echo -e &amp;quot;at+camscont\r&amp;quot; &amp;gt;/dev/smd8 echo -e &#39;AT+CAMPARA=6,&amp;quot;http://47.104.136.74:8080/upload&amp;quot;\r&#39; &amp;gt;/dev/smd8 echo -e &amp;quot;at+camrv?\r&amp;quot; &amp;gt;/dev/smd8 echo -e &amp;quot;at+camrv=1\r&amp;quot; &amp;gt;/dev/smd8 ### 调节电池分级 echo -e &amp;quot;AT+CAMPARA=10, 3600,7200,28800,86400\r&amp;quot; &amp;gt;/dev/smd8 echo -e</description></item><item><title>linux fs mtd mtdblock</title><link>/hardware/linux-fs-mtd-mtdblock/</link><pubDate>Fri, 21 Feb 2020 11:14:29 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/linux-fs-mtd-mtdblock/</guid><description>1. 文件系统简介 文件系统是一种存储和组织计算机数据的方法，它使得对其访问和查找变得容易，文件系统使用文件和树形目录的抽象逻辑概念代替了硬盘和光</description></item><item><title>AT指令（中文详解版）（一）</title><link>/hardware/at-helper/</link><pubDate>Wed, 08 Jan 2020 09:51:41 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/at-helper/</guid><description>一 ． 一 般 命 令 1．AT+CGMI 给出模块厂商的标识。 2．AT+CGMM 获得模块标识。这个命令用来得到支持的频带（GSM 900，DCS 1800 或PCS</description></item><item><title>EC20 AT 串口使用TCPIP</title><link>/hardware/ec20-at/</link><pubDate>Wed, 11 Dec 2019 15:18:59 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/ec20-at/</guid><description>EC20的低功耗模式 - 杰瑞鼠 - 博客园 端口说明： EC20挂载系统成功后，在Windows环境下会有三个com口，分别为AT Port、DM Por</description></item><item><title>xiongmai</title><link>/hardware/xiongmai/</link><pubDate>Thu, 14 Nov 2019 19:34:08 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/xiongmai/</guid><description>在ubuntu上控制雄迈模块的参数 雄迈摄像机数字接口 NeiroNx/python-dvr: xmeye sofia dvr nvr ipcam config</description></item><item><title>hi3516</title><link>/hardware/hi3516-go/</link><pubDate>Fri, 11 Oct 2019 15:04:01 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/hi3516-go/</guid><description>海思论坛 - Powered by Discuz! Hi3516A开发--烧写/启动模式 - 不积跬步，无以至千里 - CSDN博客 Hi3516A开发--烧写/启动模式 一、启动模式 Hi3516A 支</description></item><item><title>linux 内核中的pwm</title><link>/hardware/linux-pwm/</link><pubDate>Fri, 11 Oct 2019 10:02:45 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/linux-pwm/</guid><description>PWM常用来做电机控制、LED背光亮度调节、开关电源等。 Linux pwm driver with sysfs TI linux pwm user guide: http://processors.wiki.ti.com/index.php/Linux_Core_PWM_User%27s_Guide#eHRPWM Freescale: https://support.bluetechnix.at/wiki/Linux_Software_User_Manual_(i.MX6)#PWM Gateworks: http://trac.gateworks.com/wiki/linux/pwm 对于TI的pwm来说 首先配置内核支持pwm模块，其中e</description></item><item><title>gcc linaro aarch64 linux gnu</title><link>/hardware/gcc-linaro-aarch64-linux-gnu/</link><pubDate>Fri, 02 Aug 2019 14:13:01 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/gcc-linaro-aarch64-linux-gnu/</guid><description>macos 安装 ARM 交叉编译环境 gcc-linaro-7.4.1-2019.02-i686_aarch64-linux-gnu sudo tar xJf gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu.tar.xz -C /usr/local/ export PATH=/usr/local/gcc-linaro-7.4.1-2019.02-i686_aarch64-linux-gnu/bin:$PATH aarch64-linux-gnu-g++ -v GCC 5 和 GCC7 多版本共存 ls /usr/bin/gcc* sudo apt-get install gcc-4.8 sudo apt-get install g++-4.8 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 40 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 70 sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 40 sudo update-alternatives</description></item><item><title>linux pinctrl</title><link>/hardware/linux-pinctrl/</link><pubDate>Thu, 23 May 2019 10:35:37 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/linux-pinctrl/</guid><description>原文地址 https://blog.csdn.net/u012830148/article/details/80609337 https://blog.csdn.net/qq_21353001/article/details/88751773 linux内核使用pinctrl子系统实现操作gpio输出高低电平的实现 https://blog.csdn.net/u010299133/article/details/88646412s Pinctrl子系统之一了解基础概念: 1.Linux Pinctrl 子系统简介 在</description></item><item><title>go hardware</title><link>/hardware/go-hardware/</link><pubDate>Wed, 22 May 2019 10:53:46 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/go-hardware/</guid><description>rakyll/go-hardware: A directory of hardware related libs, tools, and tutorials for Go</description></item><item><title>dts platform probe</title><link>/hardware/dts-probe/</link><pubDate>Sun, 28 Apr 2019 15:31:17 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/dts-probe/</guid><description>driver使用dts的前提是driver已经是支持platform框架的driver，这样dts才可以发挥作用，因为dts和platfor</description></item><item><title>dts status</title><link>/hardware/dts-status/</link><pubDate>Sun, 28 Apr 2019 09:25:03 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/dts-status/</guid><description>在devicetree节点中通过加status来方便的使能或者disable driver - jason的笔记 - CSDN博客 结论: 默认情况下不设置stat</description></item><item><title>go gpio</title><link>/hardware/go-gpio/</link><pubDate>Fri, 26 Apr 2019 09:03:35 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/go-gpio/</guid><description>Linux下用文件IO的方式操作GPIO（/sys/class/gpio） - 卢小喵的学习笔记 - CSDN博客 Golang笔记–04–GPIO与</description></item><item><title>go usart</title><link>/hardware/go-usart/</link><pubDate>Fri, 26 Apr 2019 08:59:54 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/go-usart/</guid><description>https://github.com/andrewloable/treadmill-streetview/
func ReadSerial(s *serial.Port) { buf := make([]byte, 128) n, err := s.Read(buf) if err != nil { fmt.Printf(&amp;quot;read err %s&amp;quot;, err) } fmt.Printf(&amp;quot;Read: %x \n&amp;quot;, buf[:n]) } func WriteSerial(s *serial.Port, b []byte) { _, err := s.Write(b) if err != nil { fmt.Printf(&amp;quot;%s&amp;quot;, err) } fmt.Printf(&amp;quot;Wrote: %x\n&amp;quot;, b) } package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;os/exec&amp;quot; &amp;quot;runtime&amp;quot; &amp;quot;time&amp;quot; &amp;quot;github.com/gin-gonic/gin&amp;quot; cors &amp;quot;github.com/itsjamie/gin-cors&amp;quot; &amp;quot;github.com/tarm/serial&amp;quot; ) // SerialConfig ... type SerialConfig struct { Name string Baud int } var config SerialConfig var loops int64 // {&amp;quot;Name&amp;quot;:&amp;quot;COM4&amp;quot;,&amp;quot;Baud&amp;quot;:9600} func readConfigFromFile(ps *SerialConfig) { file, err := ioutil.</description></item><item><title>go i2c</title><link>/hardware/go-i2c/</link><pubDate>Fri, 26 Apr 2019 08:59:40 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/hardware/go-i2c/</guid><description>https://github.com/d2r2/go-i2c 对10位地址操作 https://github.com/golang/exp/blob/master/io/i2c/i2c.go / resolveAddr returns whether the addr is 10-bit masked or not. // It also returns the unmasked address. func resolveAddr(addr int) (unmasked int, tenbit bool) { return addr &amp;amp; (tenbitMask - 1), addr&amp;amp;tenbitMask == tenbitMask } go: AM2320传感器：CRC不匹配，来自传感器的</description></item></channel></rss>