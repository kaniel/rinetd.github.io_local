<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>时光小栈</title><link>/language/golang/sys/</link><description>Recent content on 时光小栈</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><managingEditor>rinetd@163.com (rinetd)</managingEditor><webMaster>rinetd@163.com (rinetd)</webMaster><copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright><lastBuildDate>Tue, 03 Apr 2018 17:13:58 +0800</lastBuildDate><atom:link href="/language/golang/sys/feed.xml" rel="self" type="application/rss+xml"/><item><title>Go 获取相对路径</title><link>/language/golang/sys/os-path/</link><pubDate>Tue, 03 Apr 2018 17:13:58 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/os-path/</guid><description>一个相对路径的获取 ```go package main import ( &amp;quot;log&amp;quot; &amp;quot;os&amp;quot; &amp;quot;os/exec&amp;quot; &amp;quot;path&amp;quot; &amp;quot;path/filepath&amp;quot; ) func main() { execDirAbsPath, _ := os.Getwd() log.Println(&amp;quot;执行程序所在目录的绝对路径 :&amp;quot;, execDirAbsPath) execFileRelativePath, _ := exec.LookPath(os.Args[0]) log.Pr</description></item><item><title>golang</title><link>/language/golang/sys/golang/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/golang/</guid><description>go librarys https://golang.org/pkg/ http://go-search.org/ go install curl -O https://storage.googleapis.com/golang/go1.7.3.linux-amd64.tar.gz tar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz sudo tar -zxf go1.7.3.linux-amd64.tar.gz -C /usr/local 环境变量配置 GOROOT: golang可执行程序本身的路径 export GOROOT=/usr/local/go/bin GOPATH: 当有多个GOPATH时，默认会将go get的内容</description></item><item><title>golang 中io包用法（一）</title><link>/language/golang/sys/io1/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/io1/</guid><description>golang 中io包用法（一） 本文转自Golove博客：http://www.cnblogs.com/golove/p/3276678.html ，并在</description></item><item><title>golang 中regexp包用法</title><link>/language/golang/sys/regexp/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/regexp/</guid><description>golang 中regexp包用法 本文转自Golove博客：http://www.cnblogs.com/golove/p/3270918.html regexp 包</description></item><item><title>golang 中strconv包用法</title><link>/language/golang/sys/strconv/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/strconv/</guid><description>golang 中strconv包用法 本文转自Golove博客：http://www.cnblogs.com/golove/p/3262925.html strconv</description></item><item><title>golang 中unicode源码解析</title><link>/language/golang/sys/unicode/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/unicode/</guid><description>// Copyright 2009 The Go Authors. All rights reserved. // Use of this source code is governed by a BSD-style // license that can be found in the LICENSE file. // go/src/unicode/utf8/utf8.go // version 1.7 // 关于 UTF-8 编码方式请参考：http://www.cnblogs.com/</description></item><item><title>golang中archive-tar包用法</title><link>/language/golang/sys/archive_tar/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/archive_tar/</guid><description>备份mysql时，想把之前的文件压缩，但是用tar czvf /data/backup/test.tar.gz /data/a/b/directory 打开一看，里面的内容是把整个绝对路径都放进去了。 如果想实现相对路径，这样写就可以解决</description></item><item><title>golang中archive-zip包用法</title><link>/language/golang/sys/archive_zip/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/archive_zip/</guid><description>golang中archive/zip包用法 archive/zip包提供了zip归档文件的读写操作。 在对zip包进行介绍之前，先说明一下zip</description></item><item><title>golang中bufio包的用法</title><link>/language/golang/sys/bufio/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/bufio/</guid><description>使用bufio处理TCP粘包问题 Go按行读取数据的坑 · Issue #10 · ma6174/blog 判断是否是空白字符: unicode.IsSpace() bufio.Reader 结构体中所有读取数据的方法，都包含了delim分隔符，</description></item><item><title>golang中builtin包说明</title><link>/language/golang/sys/builtin/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/builtin/</guid><description>golang中builtin包说明 builtin包是go的预声明定义，包括go语言中常用的各种类型和方法声明，包括变量和常量两部分．其详细声</description></item><item><title>golang中bytes包用法</title><link>/language/golang/sys/bytes/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/bytes/</guid><description>golang中bytes包用法 // bytes 包实现了用于操作 []byte 的函数，类似于 strings 包中的函数 // bytes.go // Compare 用于比较两个 []byte，并返回 int 型结果 // a == b 返回 0</description></item><item><title>golang中container-heap包用法</title><link>/language/golang/sys/container_heap/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/container_heap/</guid><description>golang中container/heap包用法 heap包对任意实现了heap接口的类型提供堆操作。（小根）堆是具有“每个节点都是以其为根的</description></item><item><title>golang中container-list包中的坑</title><link>/language/golang/sys/container_list/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/container_list/</guid><description>golang中container/list包中的坑 golang中list包用法可以参看http://blog.csdn.net/chenba</description></item><item><title>golang中container-list包用法</title><link>/language/golang/sys/container_list0/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/container_list0/</guid><description>golang中container/list包用法 list是一个双向链表。该结构具有链表的所有功能。 type Element type Element struct { Value interface{} //在元素中存储的值 } func (e</description></item><item><title>golang中container-ring包用法</title><link>/language/golang/sys/container_ring/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/container_ring/</guid><description>golang中container/ring包用法 ring包实现了环形链表的操作。 type Ring //Ring类型代表环形链表的一个元素，同时也代表链表本</description></item><item><title>golang中image-color包的用法</title><link>/language/golang/sys/image_color/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/image_color/</guid><description>golang中image/color包的用法 color包是image包对于color重点介绍，实现了基本的颜色库 color中定义了如下几个变</description></item><item><title>golang中image-draw包用法</title><link>/language/golang/sys/image_draw/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/image_draw/</guid><description>golang中image/draw包用法 draw包提供了图片的生成方法，或者绘制方法．其使用方法只需导入响应的包即可＂import image/draw&amp;quot; func Draw(dst Image, r</description></item><item><title>golang中image-gif包用法</title><link>/language/golang/sys/image_gif/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/image_gif/</guid><description>gif包实现了gif图片的解码及编码 func Decode(r io.Reader) (image.Image, error) //Decode从r中读取一个GIF图像，然后返回的image.Image是第一个嵌入的图。 func</description></item><item><title>golang中image-jpeg包和image-png包用法</title><link>/language/golang/sys/image_jpg_png/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/image_jpg_png/</guid><description>golang中image/jpeg包和image/png包用法 jpeg包实现了jpeg图片的编码和解码 func Decode(r io.Reader) (image.Image, error) //Decode读取一个jp</description></item><item><title>golang中image包用法</title><link>/language/golang/sys/image/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/image/</guid><description>### golang中image包用法 image包实现了一个基本的2D图像库，该包中包含基本的接口叫做image，这个里面包含color，这个将在</description></item><item><title>golang中io-ioutil包用法</title><link>/language/golang/sys/io_ioutil/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/io_ioutil/</guid><description>golang中io/ioutil包用法 // ioutil.go // ReadAll 读取 r 中的所有数据 // 返回读取的数据和读取过程中遇到的任何错误 // 如果读取成功，则 err 返回 nil，而</description></item><item><title>golang中io包用法（二）</title><link>/language/golang/sys/io/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/io/</guid><description>golang中io包用法（二） 本文转自https://github.com/polaris1119/The-Golang-Standard-</description></item><item><title>golang中io包用法（二）</title><link>/language/golang/sys/io2/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/io2/</guid><description>golang中io包用法（二） 本文转自https://github.com/polaris1119/The-Golang-Standard-</description></item><item><title>golang中net-http包用法</title><link>/language/golang/sys/net_http/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/net_http/</guid><description>golang中net/http包用法 http包包含http客户端和服务端的实现,利用Get,Head,Post,以及PostForm实现HT</description></item><item><title>golang中net-mail包用法</title><link>/language/golang/sys/net_mail/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/net_mail/</guid><description>golang中net/mail包用法 net/mail包实现了解析邮件消息的功能 本包大部分都遵守RFC 5322规定的语法，值得注意的区别是： 旧</description></item><item><title>golang中net包用法(三)--TCP和UDP以及Unix domain socket</title><link>/language/golang/sys/net_socket/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/net_socket/</guid><description>golang中net包用法(三)--TCP和UDP以及Unix domain socket type TCPAddr //表示TCP终端地址 type TCPAddr struct { IP IP Port int Zone string // IPv6寻址范围 } func ResolveTCPAddr(net, addr string)</description></item><item><title>golang中net包用法(二)--IP</title><link>/language/golang/sys/net_ip/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/net_ip/</guid><description>golang中net包用法(二)--IP IP地址（Internet Protocol Address，称为互联网协议地址，简写为IP Address），是一种给</description></item><item><title>golang中net包用法（一）</title><link>/language/golang/sys/net/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/net/</guid><description>golang中net包用法（一） net包对于网络I/O提供了便携式接口，包括TCP/IP,UDP，域名解析以及Unix Socket。尽管ne</description></item><item><title>golang中os-exec包用法</title><link>/language/golang/sys/os_exec/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/os_exec/</guid><description>golang中os/exec包用法 简介：exec包用于执行外部命令。它包装了os.StartProcess函数以便更容易的修正输入和输出，使</description></item><item><title>golang中os-signal包的使用</title><link>/language/golang/sys/os_signal/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/os_signal/</guid><description>golang中os/signal包的使用 os/signal包实现对信号的处理 golang中对信号的处理主要使用os/signal包中的两个方</description></item><item><title>golang中os-user包用法</title><link>/language/golang/sys/os_user/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/os_user/</guid><description>golang中os/user包用法 os/user包允许用户账号通过用户名或者用户id查找用户 type UnknownUserError type UnknownUserError string func (e UnknownUserError) Error() string //当通过lookup无法查</description></item><item><title>golang中os包用法</title><link>/language/golang/sys/os/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/os/</guid><description>golang中os包用法 os包中实现了平台无关的接口，设计向Unix风格，但是错误处理是go风格，当os包使用时，如果失败之后返回错误类型而</description></item><item><title>golang中sort包用法</title><link>/language/golang/sys/sort/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/sort/</guid><description>golang中sort包用法 golang中也实现了排序算法的包sort包． sort包中实现了３种基本的排序算法：插入排序．快排和堆排序．和其</description></item><item><title>golang中strings包用法</title><link>/language/golang/sys/strings/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/strings/</guid><description>golang中strings包用法 本文转自Golove博客：http://www.cnblogs.com/golove/p/3236300.</description></item><item><title>golang中sync.RWMutex和sync.Mutex区别</title><link>/language/golang/sys/sync/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/sync/</guid><description>golang中sync.RWMutex和sync.Mutex区别 版权声明：本文为博主原创文章，未经博主允许不得转载。 golang中sync包</description></item><item><title>golang中time包用法</title><link>/language/golang/sys/go-time/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/go-time/</guid><description>golang的时区和神奇的time.Parse - 简书 时间点与时间段：Time,Duration。好比MVC中的M。 时 区：Location，在</description></item><item><title>golang中并发sync和channel</title><link>/language/golang/sys/sync_channel/</link><pubDate>Tue, 04 Oct 2016 04:15:26 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/golang/sys/sync_channel/</guid><description>golang中并发sync和channel golang中实现并发非常简单，只需在需要并发的函数前面添加关键字＂go&amp;quot;，但是如何处理</description></item></channel></rss>