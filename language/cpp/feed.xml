<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>时光小栈</title><link>/language/cpp/</link><description>Recent content on 时光小栈</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><managingEditor>rinetd@163.com (rinetd)</managingEditor><webMaster>rinetd@163.com (rinetd)</webMaster><copyright>Copyright (c) 2017. All rights reserved. (版权所有) &lt;a href=&#39;http://www.miitbeian.gov.cn/&#39;&gt;鲁ICP备17074587号-1&lt;/a&gt;</copyright><lastBuildDate>Sun, 07 Jun 2020 17:00:55 +0800</lastBuildDate><atom:link href="/language/cpp/feed.xml" rel="self" type="application/rss+xml"/><item><title>CMake---优雅地构建软件项目实践</title><link>/language/cpp/cmake-grace/</link><pubDate>Sun, 07 Jun 2020 17:00:55 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/cpp/cmake-grace/</guid><description>首先说明的是本篇文章不从cmake的整个语法上去讲述，而是从一个实际项目的构建上入手，去了解如何优雅的去构建一个软件项目，搭建一个C/C++</description></item><item><title>cmake 01</title><link>/language/cpp/cmake-01/</link><pubDate>Sun, 23 Feb 2020 09:23:27 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/cpp/cmake-01/</guid><description>这篇文章主要介绍如何一步一步自己写cmake文件。 一，内部链接和外部链接 在总文件夹下新建main.c //main.c #include&amp;lt;stdio.h&amp;gt; int main(){ printf(&amp;quot;hello world from t1 main!\n&amp;quot;); return 0; } 在同一目录下写好</description></item><item><title>cmake 02 static lib</title><link>/language/cpp/cmake-02-static-lib/</link><pubDate>Sun, 23 Feb 2020 09:16:27 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/cpp/cmake-02-static-lib/</guid><description>组织为静态和动态库 通常的项目都会划分模块，模块以库的形式进行链接（动态或静态），在 cmake 中进行这一构建操作也是比较简单。 还是原来的 helloworld 项目，现在从</description></item><item><title>cmake himix200 toolchain</title><link>/language/cpp/cmake-himix200-toolchain/</link><pubDate>Sun, 23 Feb 2020 08:36:05 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/cpp/cmake-himix200-toolchain/</guid><description>toolchains/himix200.toolchain.cmake
# set cross-compiled system type, it&#39;s better not use the type which cmake cannot recognized. SET ( CMAKE_SYSTEM_NAME Linux ) SET ( CMAKE_SYSTEM_PROCESSOR arm ) # when hislicon SDK was installed, toolchain was installed in the path as below: SET ( CMAKE_C_COMPILER /opt/hisi-linux/x86-arm/arm-himix200-linux/bin/arm-himix200-linux-gcc ) SET ( CMAKE_CXX_COMPILER /opt/hisi-linux/x86-arm/arm-himix200-linux/bin/arm-himix200-linux-g++ ) # set searching rules for cross-compiler SET ( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER ) SET ( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY ) SET ( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY ) # set ${CMAKE_C_FLAGS} and ${CMAKE_CXX_FLAGS}flag for cross-compiled process SET ( CROSS_COMPILATION_ARM himix200 ) SET ( CROSS_COMPILATION_ARCHITECTURE armv7-a ) # set g++ param SET ( CMAKE_CXX_FLAGS &amp;quot;-std=c++11 -march=armv7-a -mfloat-abi=softfp -mfpu=neon-vfpv4 -fopenmp ${CMAKE_CXX_FLAGS}&amp;quot; ) add_definitions(-D__ARM_NEON) add_definitions(-D__ANDROID__) Build for Hisilicon platform with cross-compiling $ mkdir -p build &amp;amp;&amp;amp; cd build</description></item><item><title>cmake var</title><link>/language/cpp/cmake-var/</link><pubDate>Sun, 09 Feb 2020 09:28:56 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/cpp/cmake-var/</guid><description>cmake 获取git版本信息并传入源码输出_guo_lei_lamant的博客-CSDN博客 CMakeLists.txt cmake_minimum_required(VERSION 2.8) project(test) set(SRCS main.cpp) # 执行git命令，并把结果重定向到自定义变量</description></item><item><title>cmake</title><link>/language/cpp/cmake/</link><pubDate>Sat, 09 Nov 2019 13:52:50 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/cpp/cmake/</guid><description>&lt;p&gt;&lt;a href=&#34;https://github.com/Campanula/CMake-tutorial&#34; target=&#34;_blank&#34;&gt;Campanula/CMake-tutorial: CMake 官方教程&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/BrightXiaoHan/CMakeTutorial&#34; target=&#34;_blank&#34;&gt;BrightXiaoHan/CMakeTutorial: CMake中文实战教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CMAKE_CURRENT_SOURCE_DIR&lt;/code&gt;&lt;br /&gt;
这是当前处理的CMakeLists.txt所在的目录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CMAKE_CURRENT_LIST_DIR&lt;/code&gt;&lt;br /&gt;
(自2.8.3开始)这是当前正在处理的列表文件的目录&lt;/p&gt;
&lt;h3 id=&#34;cmake-uninstall-卸载安装后的文件&#34;&gt;cmake uninstall 卸载安装后的文件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cat install_manifest.txt | sudo xargs rm&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;camke-静态编译-a-undefined-reference-to-routing-record&#34;&gt;camke 静态编译.a undefined reference to `routing_record&#39;&lt;/h3&gt;
&lt;p&gt;collect2: error: ld returned 1 exit status&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;aux_source_directory(. DIR_SRCS)
add_executable(${TARGETS} ${DIR_SRCS})
target_link_libraries(${TARGETS} -Wl,--start-group) #
foreach(findlib ${LIBNAMES})
target_link_libraries(${TARGETS} ${findlib})
endforeach()
find_package(&amp;quot;Threads&amp;quot;)
target_link_libraries(${TARGETS} ${CMAKE_THREAD_LIBS_INIT} )
# set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} &amp;quot;-pthread&amp;quot;)
target_link_libraries(${TARGETS} -Wl,--end-group )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;#Set cross compilation information
set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR arm)
# GCC toolchain prefix
set(TOOLCHAIN_PREFIX &amp;quot;arm-none-eabi&amp;quot;)
set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}-gcc)
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}-g++)
set(CMAKE_ASM_COMPILER ${TOOLCHAIN_PREFIX}-as)
set(CMAKE_AR ${TOOLCHAIN_PREFIX}-ar)
set(CMAKE_OBJCOPY ${TOOLCHAIN_PREFIX}-objcopy)
set(CMAKE_OBJDUMP ${TOOLCHAIN_PREFIX}-objdump)
enable_language(ASM)
set(CPU &amp;quot;-mcpu=cortex-m4&amp;quot;)
set(FPU &amp;quot;-mfpu=fpv4-sp-d16 -mfloat-abi=softfp&amp;quot;)
set(CMAKE_ASM_FLAGS &amp;quot;${CMAKE_ASM_FLAGS} -mthumb ${CPU} ${FPU} -MD&amp;quot;)
set(CMAKE_C_FLAGS &amp;quot;${CMAKE_C_FLAGS} -mthumb ${CPU} ${FPU} -std=gnu99 -Os -ffunction-sections -fdata-sections -MD -Wall -pedantic&amp;quot;)
set(CMAKE_CXX_FLAGS &amp;quot;${CMAKE_CXX_FLAGS} -mthumb ${CPU} ${FPU} -Os -ffunction-sections -fdata-sections -MD -Wall -pedantic -fno-exceptions -fno-rtti&amp;quot;)
set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS &amp;quot;&amp;quot;)
set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS &amp;quot;&amp;quot;)
set(CMAKE_EXE_LINKER_FLAGS &amp;quot;-T${PROJECT_SOURCE_DIR}/tm4c123g.ld -specs=${PROJECT_SOURCE_DIR}/tiva.specs&amp;quot;)
# Processor specific definitions
add_definitions(-DPART_TM4C123GH6PM)
add_definitions(-DTARGET_IS_TM4C123_RA1)
add_definitions(-Dgcc)
set(FLASH_EXECUTABLE &amp;quot;lm4flash&amp;quot;)
ADD_CUSTOM_TARGET(&amp;quot;flash&amp;quot; DEPENDS ${CMAKE_PROJECT_NAME}.axf
COMMAND ${CMAKE_OBJCOPY} -O binary ${CMAKE_PROJECT_NAME}.axf ${CMAKE_PROJECT_NAME}.bin
COMMAND ${FLASH_EXECUTABLE} ${CMAKE_PROJECT_NAME}.bin
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cmake-使用-cmake-install-prefix-来指定install的安装目录&#34;&gt;cmake：使用 CMAKE_INSTALL_PREFIX 来指定install的安装目录&lt;/h3&gt;
&lt;p&gt;方法1 在执行cmake时指定：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmake -DCMAKE_INSTALL_PREFIX=&amp;lt;你想要安装的路径&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;方法二 设置CMAKE_INSTALL_PREFIX 变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在 PROJECT(&amp;lt; project_name&amp;gt;) 之后。`SET(CMAKE_INSTALL_PREFIX /usr/local/)`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;在设置完install的安装目录之后，执行install时可以通过DESTINATION直接指定安装目录之下的目录&lt;/p&gt;
&lt;p&gt;set(CMAKE_INSTALL_PREFIX /usr/local)&lt;br /&gt;
install(TARGETS test DESTINATION bin) #将test安装到/usr/local/bin目录下&lt;/p&gt;
&lt;h3 id=&#34;二-构建交叉编译的cmakelists-txt&#34;&gt;二 构建交叉编译的CMakeLists.txt&lt;/h3&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;设置交叉编译之前，必须在CMakeList.txt前面加上这样一句，这样CMake才会认为你是要交叉编译：&lt;/p&gt;
&lt;p&gt;SET(CMAKE_SYSTEM_NAME Linux)&lt;/p&gt;
&lt;p&gt;在通知CMake要交叉编译以后，还要告诉CMake到哪个路径下去找库文件，因为在交叉编译的时候CMake是不会自动去系统默认的目录找库文件和头文件的：&lt;/p&gt;
&lt;p&gt;SET(CMAKE_FIND_ROOT_PATH &amp;quot;编译器环境路径&amp;quot;)&lt;br /&gt;
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)&lt;br /&gt;
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)&lt;br /&gt;
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)&lt;/p&gt;
&lt;p&gt;其中的第一行，是告诉CMake查找的根目录是什么。&lt;br /&gt;
后面分别是告诉CMake怎么查找编译时候的工具程序的位置、库的位置和头文件的位置。&lt;br /&gt;
设置为NEVER表示不查找，设置为ONLY表示只在CMAKE_FIND_ROOT_PATH设定的目录下查找，设置为BOTH（这是默认选项）表示既可以在系统目录下查找，也可以在CMAKE_FIND_ROOT_PATH下查找。因为咱们是交叉编译，所以后两项的设置了ONLY，对于编译时调用工具，一般来说是需要在系统目录下查找的，不过我不需要所以设置为NEVER。&lt;/p&gt;
&lt;p&gt;然后，设置编译器：&lt;/p&gt;
&lt;p&gt;SET(CMAKE_C_COMPILER &amp;quot;编译器环境路径&amp;quot;)&lt;/p&gt;
&lt;p&gt;直接把编译器的路径设置过去就可以了，CMAKE_C_COMPILER是C语言编译器，CMAKE_CXX_COMPILE是C++语言编译器。&lt;/p&gt;
&lt;p&gt;所以 在工程主CMakeLists.txt 中&lt;strong&gt;首先&lt;/strong&gt;加入如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-m&#34;&gt;
SET ( CMAKE_SYSTEM_NAME Linux )
SET ( CMAKE_SYSTEM_PROCESSOR arm )
# when hislicon SDK was installed, toolchain was installed in the path as below:
# SET ( CMAKE_C_COMPILER /opt/hisi-linux/x86-arm/arm-himix200-linux/bin/arm-himix200-linux-gcc )
# SET ( CMAKE_CXX_COMPILER /opt/hisi-linux/x86-arm/arm-himix200-linux/bin/arm-himix200-linux-g++ )
set(CMAKE_C_COMPILER &amp;quot;arm-none-linux-gnueabi-gcc&amp;quot;)
set(CMAKE_CXX_COMPILER &amp;quot;arm-none-linux-gnueabi-g++&amp;quot;)
# set searching rules for cross-compiler
# SET(TOOLCHAIN_DIR &amp;quot;/opt/mv_pro_4.0/montavista/pro/devkit/arm/v5t_le&amp;quot;)
# SET(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_DIR})
SET ( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )
SET ( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )
SET ( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )
# set ${CMAKE_C_FLAGS} and ${CMAKE_CXX_FLAGS}flag for cross-compiled process
SET ( CROSS_COMPILATION_ARM himix200 )
SET ( CROSS_COMPILATION_ARCHITECTURE armv7-a )
# set g++ param
SET ( CMAKE_CXX_FLAGS &amp;quot;-std=c++11 -march=armv7-a -mfloat-abi=softfp -mfpu=neon-vfpv4 ${CMAKE_CXX_FLAGS}&amp;quot; )
add_definitions(-D__ARM_NEON)
# add_definitions(-D__ANDROID__)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-m&#34;&gt;cmake_minimum_required(VERSION 2.8)
project( DisplayImage )
find_package( OpenCV REQUIRED )
include_directories( ${OpenCV_INCLUDE_DIRS} )
add_executable( DisplayImage DisplayImage.cpp ) # 生成可执行文件
target_link_libraries( DisplayImage ${OpenCV_LIBS} )
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cmake-链接第三方的库-和-添加c-11的支持&#34;&gt;CMake 链接第三方的库 和 添加C++11的支持&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;# CMake 最低版本号要求
cmake_minimum_required (VERSION 2.8)
# 项目信息
project (server)
# 查找当前目录下的所有源文件
# 并将名称保存到 DIR_SRCS 变量
aux_source_directory(. DIR_SRCS)
# 添加第三方的库
set(INC_DIR /usr/local/include/)
set(LINK_DIR /usr/local/lib)
include_directories(${INC_DIR})
link_directories(${LINK_DIR})
link_libraries(ev)
# 指定生成目标
add_executable(server ${DIR_SRCS})
# 将第三方的库链接到可执行文件
target_link_libraries(server ev)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那要怎么样, 才能支持C++11呢?&lt;/p&gt;
&lt;p&gt;很简单, 在版本要求的下面, 加上这两句话, 就行了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;SET(CMAKE_C_COMPILER g++)
add_compile_options(-std=c++14)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;————————————————&lt;br /&gt;
版权声明：本文为CSDN博主「奔跑的龙少」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。&lt;br /&gt;
原文链接：&lt;a href=&#34;https://blog.csdn.net/shine_journey/article/details/78732809&#34; target=&#34;_blank&#34;&gt;https://blog.csdn.net/shine_journey/article/details/78732809&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;cmake是gnu工具链中构建项目的重要一环，而且在windows Linux OS X中都可以使用，是程序员（特别是linux程序员，因为windows上有无比强大的VS）必备的基本功。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;命名变量
set(INC_DIR /usr/local/include)
set(LINK_DIR /usr/local/lib)
set(SOURCE_FILES main.cpp)
去哪里找头文件 相当于gcc/clang 中的-I(i的大写字母)参数
include_directories(${INC_DIR}) # 用${}引用变量
去哪里找库文件 .so .dll .dylib 相当于gcc 中的-L参数
link_directories(${LINK_DIR})
要链接的库文件的名字 相当于gcc中的-l(小写的l)参数
target_link_libraries(test_boost boost_filesystem boost_system)
只写库名就可以，就是libxxx.so的中间xxx的部分
也可以写成下面这样
target_link_libraries(test_boost
boost_filesystem
boost_system)
通过上面的这些关键词，我们就可以使用第三方库了。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者：lcode&lt;br /&gt;
链接：&lt;a href=&#34;https://www.jianshu.com/p/33126d6baa3c&#34; target=&#34;_blank&#34;&gt;https://www.jianshu.com/p/33126d6baa3c&lt;/a&gt;&lt;br /&gt;
来源：简书&lt;br /&gt;
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;前面的文章介绍了一个最简单的CMake工程，这篇文章将介绍一个稍微复杂一些的CMake工程，结合这个工程总结一下在组织一个C/C++工程时最为常用的一些CMake命令和变量。对于涉及到的命令和变量，介绍的原则是点到即止，先仅需掌握基本用法即可，让工程跑起来。&lt;/p&gt;
&lt;p&gt;上一篇文章中那个最简单的CMake Hello World工程，在其CMake脚本文件CMakeLists.txt中，仅有一句话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```c
add_executable(hello hello.cpp)
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里面的&lt;code&gt;add_executable&lt;/code&gt;就是一个CMake命令，它的作用是添加一个可执行文件构建目标。&lt;/p&gt;
&lt;p&gt;下面从一个C++应用程序的编译过程为脉络对涉及到的命令和变量进行说明。&lt;/p&gt;</description></item><item><title>boost</title><link>/language/cpp/boost/</link><pubDate>Wed, 06 Nov 2019 15:17:38 +0800</pubDate><author>rinetd@163.com (rinetd)</author><guid>/language/cpp/boost/</guid><description>sudo apt-get install --no-install-recommends libboost-all-dev /usr/bin/ld: cannot find -lboost_python ln -s /usr/local/lib/libboost_python27.so /usr/local/lib/libboost_python.so 卸载源码编译的boost库，需要删除: 1.安装路径的boost； 2. /usr/local/include/路径下的b</description></item></channel></rss>